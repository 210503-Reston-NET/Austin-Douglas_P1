# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool: default
  

variables:
  solution: 'DougsExoticPetStore.sln'
  buildPlatform: 'Any CPU'
  buildConfigurtion: 'Release'

steps:
- task: SonarCloudPrepare@1
  displayName: SonarCloud Prep
  inputs:
    SonarCloud: 'SonarCloudMM'
    organization: '210503-reston-net'
    scannerMode: 'MSBuild'
    projectKey: '210503-Reston-NET_Austin-Douglas-p1'
    projectName: 'Austin-Douglas-p1'
- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: 'restore'
    projects: $(solution)
    feedsToUse: 'select'
- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: 'build'
    projects: $(solution)
- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: 'test'
    projects: 'Tests/*.csproj'
- task: SonarCloudAnalyze@1
  displayName: Run Code Analysis
- task: SonarCloudPublish@1
  displayName: Publish Code Analysis
- task: DotNetCoreCLI@2
  displayName: Publish
  inputs:
    command: 'publish'
    publishWebProjects: true
    zipAfterPublish: true
    projects: 'StoreUI/*.csproj'
- task: AzureRmWebAppDeployment@4
  displayName: Deploy
  inputs:
    ConnectionType: 'AzureRM'
    azureSubscription: 'Azure subscription 1(958dfd28-6f5e-4833-be1f-aa14358bb930)'
    appType: 'webApp'
    WebAppName: 'DougsExoticPetStore'
    

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'
- task: SonarCloudPrepare@1
    inputs:
      <Other Inputs>
      extraProperties: 'sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/**/coverage.opencover.xml'  
#V2
  - task: DotNetCoreCLI@2
    displayName: 'Run unit tests - $(buildConfiguration)'
    inputs:
      command: 'test'
      arguments: '--configuration $(buildConfiguration) /p:CollectCoverage=true "/p:CoverletOutputFormat=\"opencover,Cobertura\""'
      publishTestResults: true
      projects: '$(solution)'

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish Code Coverage Report'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'
      reportDirectory: '$(Build.SourcesDirectory)/App/Tests/'